#!/usr/bin/env node
const Loaders = require('./src/loaders')
const Rewinder = require('./src/rewinder')
const meow = require('meow')
const cli = meow(`
    Usage
      $ ./rewind <locationCode> <untilOperation>

      locationCode   Code of the Location to use as root
      untilOperation An Operation id or a datetime string to replay to, INCLUDED

    Options
      --dsn          Database Source Name
      --notype       Comma separated list of Operation types to exclude
      --noop         Comma separated list of Operation ids to exclude

    Examples
      $ ./rewind TOST 248628
      TOST,121171-4CY-31X32,4

      $ ./rewind TOST 248628 --exclude-type "retail sale" --dsn mysql://root@127.0.0.1:3306/projectx
      TOST,121171-4CY-31X32,5
`, {
  flags: {
    notype: {
      type: 'string'
    },
    dsn: {
      type: 'string',
      default: 'mysql://root@127.0.0.1:3306/projectx'
    }
  }
})

if (cli.input.length !== 2) {
  cli.showHelp(1)
}

const connection = require('./src/connection')(cli.flags.dsn)

let main = async () => {
  // Find the starting node
  const startId = await Loaders.loadLocationCode(connection, cli.input[0])
  if (!startId) {
    throw Error(`Cannot find starting Location:${cli.input[0]}`)
  }

  // Load operations to be replayed
  console.log(`Loading until ${cli.input[1]}...`)
  const operations = await Loaders.loadOperationsUntil(connection, cli.input[1])
  console.log(`Loaded ${operations.size} operations`)

  // Create a Rewinder
  let notype = []
  if (cli.flags.notype) {
    notype = cli.flags.notype.split(',')
  }
  let noop = []
  if (cli.flags.noop) {
    noop = cli.flags.noop.split(',')
  }

  const rewinder = new Rewinder(
    Loaders.loadSubtree.bind(Loaders, connection),
    notype,
    noop
  )
  const inv = await rewinder.rewind(startId, operations)

  console.log(`Done`)
  console.log(inv.toCsv())
  connection.end()
}

main()
